---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 21 @ 11:59PM"
author: "Amaan Jogia-Sattar, 206324648"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(gtsummary)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
library(lubridate)
```

Display your machine memory.
```{r}
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

![](10001217_adt.png)
Do a similar visualization for the patient with `subject_id` 10063848 using ggplot.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible.

**Solution**: First, we will create a symbolic link to the `.parquet` file we created in`HW2`. This is done in the terminal. 

Since we want to make sure that our code will be reproducible with any pre-specified `subject_id`, we will parameterize this value: We will load the `labevents` dataset via our symbolic link, filtering it by our `subject_id` of interest. We collect the values and are now ready to load in the other datasets from which we will be drawing information. 
```{r}
# Specify the subject id of interest
subjid <- 10063848  

# Create labevents data.frame
labevents <- arrow::open_dataset('labevents_pq') %>% 
  filter(subject_id == subjid) %>% 
  collect()

# Get patient data
patients <- read_csv('~/mimic/hosp/patients.csv.gz') %>%
  filter(subject_id == subjid)

# Get admissions data
admissions <- read_csv('~/mimic/hosp/admissions.csv.gz') %>%
  filter(subject_id == subjid)

# Get transfers data
transfers <- read_csv('~/mimic/hosp/transfers.csv.gz') %>%
  filter(subject_id == subjid)

# Get procedures_icd data
procedures_icd <- read_csv('~/mimic/hosp/procedures_icd.csv.gz') %>%
  filter(subject_id == subjid)

# Get diagnoses_icd data
diagnoses_icd <- read_csv('~/mimic/hosp/diagnoses_icd.csv.gz') %>%
  filter(subject_id == subjid)

# Get d_icd_procedures data
d_icd_procedures <- read_csv('~/mimic/hosp/d_icd_procedures.csv.gz') 

# Get d_icd_diagnoses data
d_icd_diagnoses <- read_csv('~/mimic/hosp/d_icd_diagnoses.csv.gz')
```

Now, we will begin organizing our data. From `admissions`, we know we will need `admittime`, `dischtime`, and to specify the event type as `ADT`. 
We first slice off our demographic information and label it `patient_info`. Next, we add the `event_type` of `ADT` to our admissions dataframe, properly format `admittime` and `dischtime`, and select our columns of interest. 
```{r}
# Prepare patient demographics
patient_info_viz <- patients %>%
  filter(subject_id == subjid) %>%
  select(subject_id, gender, anchor_age) %>%  # Get gender & age from patients
  left_join(
    admissions %>% select(subject_id, race),  # Get race from admissions
    by = "subject_id"
  ) %>%
  slice(1)
# Format gender properly
patient_info_viz <- patient_info_viz %>%
  mutate(gender = ifelse(gender == "M", "Male", "Female"),
         race = str_to_title(race))

# Prepare admissions_viz info
admissions_viz <- admissions %>%
  mutate(
    event_type = 'ADT',
    admittime = ymd_hms(admittime),
    dischtime = ymd_hms(dischtime)
  ) %>%
  select(
    subject_id,
    admittime,
    dischtime,
    event_type
  )

# prepare transfers_viz info
transfers_viz <- transfers %>%
  mutate(
    event_type = 'ADT',
    admittime = ymd_hms(intime),
    dischtime = ymd_hms(outtime)
  ) %>%
  select(
    subject_id,
    admittime,
    dischtime,
    event_type,
    careunit
  )

# Merge admissions and transfers information
adt_events_viz <- bind_rows(
  admissions_viz,
  transfers_viz
) %>%
  arrange(admittime)

# Account for missing care_unit values
adt_events_viz <- adt_events_viz %>%
  mutate(
    careunit = ifelse(is.na(careunit) | careunit == "",
                      "UNKNOWN",
                      careunit)
  )
# Account for ICU/CCU Status 
adt_events_viz <- adt_events_viz %>%
  mutate(
    is_icu_ccu = ifelse(str_detect(str_to_lower(careunit), "icu|ccu"), "ICU/CCU", "Other")  # ✅ Matches "icu" or "ccu"
  )
```
Now we have organized `Admits, Transfers, and Discharges (ADT)`. We will proceed to prepare our lab events, which correspond to crosses in our visualization. To do this, we label an `event_type`, convert `charttime` to `UTC`, and select columns of interest. We can proceed to work with procedure information, which relies on`procedures_icd` as well as `d_icd_procedures`. We note that exact timestamps are not provided in the `procedures_icd` dataframe (dates only), so they take on a default value of `YYYY-MM-DD 00:00:00`. 

```{r}
# Prepare labevents_viz
labevents_viz <- labevents %>%
  mutate(
    event_type = 'Lab',
    charttime = with_tz(ymd_hms(charttime), 'UTC')
  ) %>%
  select(
    subject_id,
    charttime,
    event_type
  )

# Prepare procedures
procedures_viz <- procedures_icd %>%
  left_join(d_icd_procedures,
            by = 'icd_code') %>%
  mutate(
    event_type = 'Procedure',
    procedure_time = ymd(chartdate),
    procedure_desc = coalesce(long_title, 'Unknown')
    ) %>%
  select(
    subject_id,
    procedure_time,
    event_type,
    procedure_desc
  )

top_diagnoses <- diagnoses_icd %>%
  filter(subject_id == subjid) %>%
  left_join(d_icd_diagnoses, by = "icd_code") %>%
  arrange(seq_num) %>%              # sort by the sequence number (primary diagnoses first)
  distinct(long_title, .keep_all = TRUE) %>%  # keep only one row per unique diagnosis
  slice_head(n = 3) %>%             # take the top 3 unique diagnoses
  pull(long_title)


```
Lastly, we will combine all of our information before creating the visualization.  We will also set up some preliminaries for the visualization process. First, we factorize the event type, as we are ordering the chart based on it. Secondly, we will create the title text based on our patient demographic information. We ensure that all columns we are binding on are named uniformly, and we arrange our aggregated data.
```{r}
timeline_events_viz <- bind_rows(
  adt_events_viz,
  labevents_viz %>% rename(admittime = charttime),
  procedures_viz %>% rename(admittime = procedure_time)
) %>%
  arrange(admittime)

# Factorize event_type to ensure proper ordering
timeline_events_viz$event_type <- factor(
  timeline_events_viz$event_type, 
  levels = c("ADT", "Lab", "Procedure"),  # ✅ Correct order: ADT → Lab → Procedure
  ordered = TRUE
)


  # Format title with demographics
title_text <- paste0(
  "Patient ", patient_info_viz$subject_id, ", ", patient_info_viz$gender, 
  ", ", patient_info_viz$anchor_age, " years old, ", patient_info_viz$race
)
# Format subtitle (line break for each diagnosis)
subtitle_text <- paste(top_diagnoses, collapse = "\n") 
```
Now it is time for visualization.

```{r fig.width=12, fig.height=6}
# Order the Event Type for Plotting
timeline_events_viz <- timeline_events_viz %>%
  mutate(
    y_position = case_when(
      event_type == "ADT" ~ 3,
      event_type == "Procedure" ~ 1,
      event_type == "Lab" ~ 2,
      TRUE ~ NA_real_
    )
  )

ggplot(data = timeline_events_viz) +
  # 1) ADT as segments at y_position = 3
  geom_segment(
    data = timeline_events_viz %>% filter(event_type == "ADT"),
    aes(
      x = admittime, xend = dischtime,
      y = y_position, yend = y_position,
      color = careunit,
      linewidth = is_icu_ccu == "ICU/CCU"  # Thicker lines for ICU/CCU
    )
  ) +
  
  # 2) Procedure as points at y_position = 1
  geom_point(
    data = timeline_events_viz %>% filter(event_type == "Procedure"),
    aes(
      x = admittime, 
      y = y_position, 
      shape = procedure_desc
    ),
    size = 3, color = "black"
  ) +
  
  # 3) Lab as points at y_position = 2
  geom_point(
    data = timeline_events_viz %>% filter(event_type == "Lab"),
    aes(
      x = admittime, 
      y = y_position
    ),
    shape = 3, size = 3, color = "black"  # shape=3 = plus sign
  ) +
  
  # 4) Control the x-axis breaks/labels
  scale_x_datetime(date_breaks = "1 week", date_labels = "%b %d") +
  
  # 5) Manually control the y-axis
  scale_y_continuous(
    name = NULL, 
    breaks = c(1, 2, 3),
    limits = c(0.5, 3.5), 
    labels = c("Lab", "Procedure", "ADT")  
  ) +
  
  # 6) Title, subtitle, legend labels
  labs(
    title = paste0(
      "Patient ", patient_info_viz$subject_id, ", ", 
      patient_info_viz$gender, ", ", 
      patient_info_viz$anchor_age, " years old, ", 
      patient_info_viz$race
    ),
    subtitle = subtitle_text,
    x = "Calendar Time",
    y = NULL,
    color = "Care Unit",     
    shape = "Procedure Type" 
  ) +
  
  # 7) Use a theme (you can keep theme_minimal or switch to theme_light)
  theme_minimal() +
  theme(
    panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
    panel.grid.major = element_line(color = "gray80"),
    panel.grid.minor = element_blank(),
    axis.line = element_blank(),
    legend.position = "bottom",
    legend.box = "vertical"
  ) +
  
  # 8) Control the legend ordering and remove the linewidth legend
  guides(
    color = guide_legend(
      override.aes = list(linewidth = 1.5),  
      order = 1                              
    ),
    shape = guide_legend(
      order = 2                              
    ),
    linewidth = "none"                       
  )


```
### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.

![](10001217_icu.png)

Do a similar visualization for the patient `10063848`.
**Solution**:
First, we must acquire our dataset. Once again, we will borrow this from our previous assignment using a symbolic link, which has been done in the terminal. I reference this file as `chartevents_parquet`.
Now, we will load in the dataset, filtering for our preselected patient.
```{r}
items <- read_csv('~/mimic/icu/d_items.csv.gz')
chartid <- 10063848
chartevents_viz <- arrow::open_dataset("chartevents_pq") %>% 
  select(subject_id, itemid, charttime, valuenum, stay_id) %>%  
  filter(subject_id == chartid, 
         itemid %in% c(
           220045,  # Mean Arterial Pressure
           220181,  # Arterial Blood Pressure systolic
           220179,  # Arterial Blood Pressure diastolic
           223761,  # Heart Rate
           220210   # Respiratory Rate
         )) %>%
  arrange(subject_id, charttime, itemid) %>%  
  collect()  

# Attach abbreviations
chartevents_viz <- chartevents_viz %>%
  left_join(
    items %>% select(itemid, abbreviation), 
    by = "itemid"
  )
# Fix dates
chartevents_viz <- chartevents_viz %>%
  mutate(charttime = with_tz(charttime, "UTC"))  # ✅ Ensure it's UTC




```

```{r fig.width=10, fig.height=6}
ggplot(chartevents_viz, aes(x = charttime, y = valuenum, color = abbreviation,
                            group = interaction(stay_id, abbreviation))) +
  geom_line(linewidth = 1) +  
  geom_point(size = 2) +  

  
  facet_grid(rows = vars(abbreviation), cols = vars(stay_id), scales = "free") +  

  scale_x_datetime(
    breaks = seq(
      floor_date(min(chartevents_viz$charttime, na.rm = TRUE), unit = "3 hours"), 
      ceiling_date(max(chartevents_viz$charttime, na.rm = TRUE), unit = "3 hours"), 
      by = "3 hours"
    ),
    labels = function(x) {
      labels <- format(x, "%b %d %H:%M")  
      labels[seq(2, length(labels), 2)] <- ""  
      return(labels)
    }
  )  +  

  scale_color_manual(values = c(
    "HR" = "#E74C3C",       
    "NBPm" = "#9A8700",      
    "NBPs" = "#009E73",      
    "RR" = "#009ADE",        
    "Temperature F" = "#E377C2"  
  )) +  

  labs(
    title = paste0("Patient ", chartid, " ICU stays - Vitals"),
    x = "Calendar Time",
    y = "Vital Value"
  ) +

  theme_minimal() +
  theme(
    strip.text.x = element_text(face = "bold", size = 14, color = "white"),  
    strip.text.y.right = element_text(face = "bold", size = 12, color = 'white'),  
    strip.background = element_rect(fill = "gray50", color = "gray50"),  
    strip.placement = "outside",
    panel.grid.major = element_line(color = "gray80"), 
    panel.grid.minor = element_blank(),

    # Make X-Axis Labels Horizontal
    axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10),  
    
    # Remove "Vital Sign" Legend
    legend.position = "none"  
  )



```
Now try it with the requested patient id: 

```{r fig.width=10, fig.height=6}
ggplot(chartevents_viz, aes(x = charttime, y = valuenum, color = abbreviation,
                            group = interaction(stay_id, abbreviation))) +
  geom_line(linewidth = 1) +  
  geom_point(size = 2) +  

  # ✅ Move vital signs to the right while keeping ICU stays at the top
  facet_grid(rows = vars(abbreviation), cols = vars(stay_id), scales = "free") +  

  # ✅ Remove explicit scale_x_datetime to use default ggplot ticks
  scale_color_manual(values = c(
    "HR" = "#E74C3C",       
    "NBPm" = "#9A8700",      
    "NBPs" = "#009E73",      
    "RR" = "#009ADE",        
    "Temperature F" = "#E377C2"  
  )) +  

  labs(
    title = paste0("Patient ", chartid, " ICU stays - Vitals"),
    x = "Calendar Time",
    y = "Vital Value"
  ) +

  theme_minimal() +
  theme(
    strip.text.x = element_text(face = "bold", size = 14, color = "white"),  # ✅ ICU stay labels remain on top
    strip.text.y.right = element_text(face = "bold", size = 12, color = 'white'),  # ✅ Move vital signs to the right
    strip.background = element_rect(fill = "gray50", color = "gray50"),  
    strip.placement = "outside",
    panel.grid.major = element_line(color = "gray80"), 
    panel.grid.minor = element_blank(),

    # ✅ Use default tick spacing on both axes
    axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10),  
    
    # ✅ Remove "Vital Sign" Legend
    legend.position = "none"  
  )

```
## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are
```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion

Import `icustays.csv.gz` as a tibble `icustays_tble`. 

### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs. 

## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.

### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

- number of admissions per patient  
- admission hour (anything unusual?)  
- admission minute (anything unusual?)  
- length of hospital stay (from admission to discharge) (anything unusual?)  

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting), 

> All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient’s age at their first admission has been fixed to 300.

## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`.

### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements. 
```{bash}
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.

![](labevents_tble.png)


Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`. 
```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement (by `storetime`) within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement. 

![](chartevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` >= 18) and columns contain at least following variables

- all variables in `icustays_tble`  
- all variables in `admissions_tble`  
- all variables in `patients_tble`
- the last lab measurements before the ICU stay in `labevents_tble` 
- the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png)

## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:

- Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)

- Length of ICU stay `los` vs the last available lab measurements before ICU stay

- Length of ICU stay `los` vs the first vital measurements within the ICU stay

- Length of ICU stay `los` vs first ICU unit

